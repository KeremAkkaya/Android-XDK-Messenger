buildscript {
    repositories {
        jcenter()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.1'
        classpath 'com.google.gms:google-services:3.2.0'
    }
}

def preReleaseRepoUrl = findProperty("preReleaseRepoUrl")

allprojects {
    repositories {
        maven { url "https://raw.githubusercontent.com/layerhq/releases-android/master/releases/" }
        maven { url "https://maven.google.com" }
        jcenter()
        if (preReleaseRepoUrl != null) {
            println "Using Pre-release repository: " + preReleaseRepoUrl
            maven { url preReleaseRepoUrl }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

// Disable preDexing for builds on CI systems, since the repo is freshly cloned and will be gone
// again after the tests are done. Speeds up builds on CI.
project.ext {
    if (project.hasProperty('preDexEnabled')) {
        project.ext.preDexLibs = project.properties['preDexEnabled'].equals('true')
    } else {
        project.ext.preDexLibs = true // pre dexing should be true by default
    }

    println('PREDEX ' + (project.ext.preDexLibs ? 'ENABLED' : 'DISABLED')) // goes to build log or console output

    minSdkVersion = 14
    targetSdkVersion = 28
    compileSdkVersion = 28

    supportLibVersion = "28.0.0"
    espressoVersion = "3.0.2"
    runnerVersion = "1.0.2"
    rulesVersion = "1.0.2"
    truthVersion = "0.39"
    multidexVersion = "1.0.3"
    daggerVersion = "2.15"
    layerSdkVersion = "4.1.0-pre2"
    mockitoVersion = "2.8.47"
    archLifecycleVersion = "1.1.1"
}

subprojects {
    project.plugins.whenPluginAdded { plugin ->
        if ("com.android.build.gradle.AppPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        } else if ("com.android.build.gradle.LibraryPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        }
    }
}